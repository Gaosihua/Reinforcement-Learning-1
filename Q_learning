#实现莫烦RL教程中一维Q—learning算法
#date：2019.12.11
#author:blue_windstorm == coach



import  numpy as np
import pandas as pd
import time

np.random.seed(2)

#定义全局变量
N_state = 6 #状态数量
ACTIONS = ['left','right'] #行为
EPSILON = 0.9 #选择最优动作的概率
ALPHA = 0.1 #学习率
GAMA = 0.9 #更新时最优动作的衰减值
MAX_EPISODES = 10  #最大学习次数
FRESH_TIME = 0.3  #每步更新时间间隔

#建立q表
def build_q_table(n_states,actions):
    table = pd.DataFrame(
        np.zeros((n_states,len(actions))), #初始化
        columns=actions
    )
    return table

#定义动作选择函数
def choose_action(state,q_table):
    state_actions = q_table.iloc[state,:]
    if (np.random.uniform() > EPSILON) or (state_actions.any() == 0):
        action_name = np.random.choice(ACTIONS)
    else:
        action_name = state_actions.idxmax()
    return action_name

#定义动作引起的后果
def get_env_feedback(S,A):
    if A == 'right':
        if S == N_state - 2:
            S = 'terminal'
            R=1
        else:
            S = S + 1
            R = 0
    else:
        R = 0
        if S == 0:
            S = S
        else:
            S = S - 1
    return S,R

#定义环境的改变
def update_env(S,episode,step_counter):
    env_list = ['-']*(N_state - 1) + ['T']
    if S == 'terminal':
        interaction = 'Episode %s:total_steps = %s'%(episode+1,step_counter)
        print('\r{}'.format(interaction),end='')
        time.sleep(2)
        print('\r                              ',end='')
    else:
        env_list[S] = 'o'
        interaction = ''.join(env_list)
        print('\r{}'.format(interaction),end='')
        time.sleep(FRESH_TIME)
    return None

#Q_learning主函数：
def rl():
    q_table = build_q_table(N_state,ACTIONS)
    for episode in range(MAX_EPISODES):
        step_conter = 0
        S = 0
        is_terminated = False
        update_env(S,episode,step_conter)
        while not is_terminated:
            A = choose_action(S,q_table)
            S_, R = get_env_feedback(S,A)
            q_predict = q_table.loc[S,A]
            if S_!= 'terminal':
                q_target = R + GAMA * q_table.loc[S_,:].max()
            else:
                q_target = R
                is_terminated = True
            q_table.loc[S,A] += ALPHA * (q_target - q_predict)
            S = S_
            update_env(S,episode,step_conter+1)
            step_conter = step_conter+1
    return q_table

if __name__ == '__main__':
    q_table = rl()
    print('\r\nQ-table:\n')
    print(q_table)
